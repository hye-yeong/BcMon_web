{"ast":null,"code":"var result = [];\n\nfunction sleep(delay) {\n  var start = new Date().getTime();\n\n  while (new Date().getTime() < start + delay) {\n    ;\n  }\n} // datainfo = [{'url', 'call_count', 'tag', 'title', 'caption', 'InValue', 'OutValue'}]\n\n\nfunction renderRealTimeData(dataInfo) {\n  var get_data = new XMLHttpRequest(); // get_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  url = dataInfo['url'];\n  get_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  get_data.onreadystatechange = function () {\n    if (get_data.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (get_data.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        result = process(dataInfo, get_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n\n        return result;\n      } else {\n        alert(title + \"그래프 데이터 요청 실패:\" + get_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  get_data.send(null);\n  return result;\n}","map":{"version":3,"sources":["/projcet/src/variables/charts_RealTime.js"],"names":["result","sleep","delay","start","Date","getTime","renderRealTimeData","dataInfo","get_data","XMLHttpRequest","url","open","onreadystatechange","readyState","status","process","alert","title","send"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAb;;AAEA,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,SAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAK,GAAGD,KAAtC;AAA4C;AAA5C;AACD,C,CAED;;;AACA,SAASI,kBAAT,CAA4BC,QAA5B,EAAqC;AACnC,MAAIC,QAAQ,GAAG,IAAIC,cAAJ,EAAf,CADmC,CACQ;;AAC3CC,EAAAA,GAAG,GAAGH,QAAQ,CAAC,KAAD,CAAd;AAEAC,EAAAA,QAAQ,CAACG,IAAT,CAAc,KAAd,EAAqBD,GAArB,EAA0B,KAA1B,EAJmC,CAID;;AAClCF,EAAAA,QAAQ,CAACI,kBAAT,GAA8B,YAAU;AACpC,QAAGJ,QAAQ,CAACK,UAAT,KAAwB,CAA3B,EAA6B;AAAQ;AACjC,UAAGL,QAAQ,CAACM,MAAT,KAAoB,GAAvB,EAA2B;AAAM;AAC7Bd,QAAAA,MAAM,GAAGe,OAAO,CAACR,QAAD,EAAWC,QAAX,CAAhB,CADuB,CACe;;AACtC,eAAOR,MAAP;AACH,OAHD,MAGK;AACCgB,QAAAA,KAAK,CAACC,KAAK,GAAC,gBAAN,GAAyBT,QAAQ,CAACM,MAAnC,CAAL,CADD,CACkD;AACtD;AACJ;AACJ,GATD;;AAUAN,EAAAA,QAAQ,CAACU,IAAT,CAAc,IAAd;AACA,SAAOlB,MAAP;AACD","sourcesContent":["let result = []\n\nfunction sleep (delay) {\n  var start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\n// datainfo = [{'url', 'call_count', 'tag', 'title', 'caption', 'InValue', 'OutValue'}]\nfunction renderRealTimeData(dataInfo){\n  var get_data = new XMLHttpRequest();       // get_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  url = dataInfo['url']\n\n  get_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  get_data.onreadystatechange = function(){\n      if(get_data.readyState === 4){       // 통신 상태가 4 = 양호 확인\n          if(get_data.status === 200){     //status 가 200일 경우 아래 process; 로 진행\n              result = process(dataInfo, get_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n              return result;\n          }else{\n                alert(title+\"그래프 데이터 요청 실패:\" + get_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  get_data.send(null);\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}