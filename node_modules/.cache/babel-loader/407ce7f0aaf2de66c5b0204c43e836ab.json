{"ast":null,"code":"import _classCallCheck from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/frontend/src/views/hyperledger/Channel.js\";\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from \"react\";\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\nvar dataSource = [];\nvar url = \"http://bcmon.kmu.ac.kr/hyperledger/data/channel\"; //Get representative data\n\nfunction getData(url) {\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  var channelData = [];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  urlData.onreadystatechange = function () {\n    if (urlData.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (urlData.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        channelData = process(urlData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n        //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n\n        return channelData;\n      } else {\n        alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  urlData.send(null);\n  return channelData;\n}\n\nfunction process(urlData) {\n  // 프로세스를 부름\n  var data = urlData.responseText; // get은 Text 방식으로, chartExample4\n\n  var parseData = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource = [];\n  var temp_data = {};\n  temp_data = parseData[0][\"id\"];\n  datasource.push(JSON.stringify(temp_data));\n  temp_data = parseData[0][\"name\"];\n  datasource.push(temp_data);\n  temp_data = parseData[0][\"blocks\"];\n  datasource.push(JSON.stringify(temp_data));\n  temp_data = parseData[0][\"trans\"];\n  datasource.push(JSON.stringify(temp_data));\n  temp_data = parseData[0][\"created\"];\n  datasource.push(JSON.stringify(temp_data));\n  return datasource;\n}\n\nvar hyperledgerChannel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(hyperledgerChannel, _React$Component);\n\n  function hyperledgerChannel() {\n    _classCallCheck(this, hyperledgerChannel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(hyperledgerChannel).apply(this, arguments));\n  }\n\n  _createClass(hyperledgerChannel, [{\n    key: \"render\",\n    value: function render() {\n      dataSource = getData(url);\n      console.log(\"2\");\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Hyperledger Channel\"), React.createElement(\"p\", {\n        className: \"category text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \".\"), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"card-chart2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chart-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, dataSource[0], React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), dataSource[1], React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), dataSource[2], React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), dataSource[3], React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), dataSource[4], React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }))))))))));\n    }\n  }]);\n\n  return hyperledgerChannel;\n}(React.Component);\n\nexport default hyperledgerChannel;","map":{"version":3,"sources":["/frontend/src/views/hyperledger/Channel.js"],"names":["React","Card","CardBody","Row","Col","dataSource","url","getData","urlData","XMLHttpRequest","channelData","open","onreadystatechange","readyState","status","process","alert","send","data","responseText","parseData","JSON","parse","datasource","temp_data","push","stringify","hyperledgerChannel","console","log","Component"],"mappings":"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","sourcesContent":["import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from \"react\";\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\n\nlet dataSource=[];\nlet url = \"http://bcmon.kmu.ac.kr/hyperledger/data/channel\";\n\n//Get representative data\nfunction getData(url){\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  var channelData=[];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  urlData.onreadystatechange = function(){\n      if(urlData.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(urlData.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n            channelData = process(urlData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n            //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n              return channelData\n          }else{\n                alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  urlData.send(null);\n  return channelData;\n}\n\nfunction process(urlData){ // 프로세스를 부름\n  var data = urlData.responseText; // get은 Text 방식으로, chartExample4\n  var parseData = JSON.parse(data); //객체화 : 배열 처리\n  var datasource = [];\n  var temp_data = {};\n\n  temp_data = parseData[0][\"id\"];\n  datasource.push(JSON.stringify(temp_data));\n\n  temp_data = parseData[0][\"name\"];\n  datasource.push(temp_data);\n\n  temp_data = parseData[0][\"blocks\"];\n  datasource.push(JSON.stringify(temp_data));\n\n  temp_data = parseData[0][\"trans\"];\n  datasource.push(JSON.stringify(temp_data));\n\n  temp_data = parseData[0][\"created\"];\n  datasource.push(JSON.stringify(temp_data));\n\n  return datasource;\n}\n\nclass hyperledgerChannel extends React.Component {\n  render() {\n    dataSource=getData(url);    \n    console.log(\"2\");\n    return (\n      <>\n        <div className=\"content\">\n        <h2 className=\"text-center\">Hyperledger Channel</h2>\n        <p className=\"category text-center\">\n          .\n        </p>\n          <div className=\"content\">\n            <Row>\n              <Col lg=\"4\">\n                <Card className=\"card-chart2\">\n                  <CardBody>\n                    <div className=\"chart-area\" >\n                      <p>\n                        {dataSource[0]}<br />\n                        {dataSource[1]}<br />\n                        {dataSource[2]}<br />\n                        {dataSource[3]}<br />\n                        {dataSource[4]}<br />\n                      </p>\n                    </div>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default hyperledgerChannel;\n"]},"metadata":{},"sourceType":"module"}