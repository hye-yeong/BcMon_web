{"ast":null,"code":"import _defineProperty from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/frontend/src/views/hyperledger/network.js\";\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from \"react\";\nimport { Card, CardHeader, CardBody, CardTitle, Row, Col } from \"reactstrap\";\nimport SortingTable from \"../../components/SortingTable/SortingTable_.js\";\nvar dataSource = [];\nvar url = \"http://bcmon.kmu.ac.kr/hyperledger/data/network\"; //Get representative data\n\nfunction getData(url) {\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  var channelData = [];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  urlData.onreadystatechange = function () {\n    if (urlData.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (urlData.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        channelData = process(urlData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n        //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n\n        return channelData;\n      } else {\n        alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  urlData.send(null);\n  return channelData;\n}\n\nfunction process(urlData) {\n  // 프로세스를 부름\n  var data = urlData.responseText; // get은 Text 방식으로, chartExample4\n\n  var parseData = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource = {};\n  var temp_data_array = [];\n  var temp_data = {};\n\n  for (var index = 0; index < parseData.length; index++) {\n    temp_data = parseData[index][\"peer_name\"];\n    datasource.push(JSON.stringify(temp_data));\n    temp_data = parseData[index][\"request_url\"];\n    datasource.push(temp_data);\n    temp_data = parseData[index][\"peer_type\"];\n    datasource.push(JSON.stringify(temp_data));\n    temp_data = parseData[index][\"mspid\"];\n    datasource.push(JSON.stringify(temp_data));\n  }\n\n  return datasource;\n}\n\nvar bitcoinNetwork =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(bitcoinNetwork, _React$Component);\n\n  function bitcoinNetwork() {\n    _classCallCheck(this, bitcoinNetwork);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(bitcoinNetwork).apply(this, arguments));\n  }\n\n  _createClass(bitcoinNetwork, [{\n    key: \"render\",\n    value: function render() {\n      dataSource = getData(url);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Hyperledger Network\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xm: \"12\",\n        md: {\n          size: 10,\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(SortingTable, {\n        thead: [{\n          text: \"Peer Name\"\n        }, {\n          className: \"text-center\",\n          text: \"Request URL\"\n        }, {\n          className: \"text-center\",\n          text: \"Peer Type\"\n        }, {\n          className: \"text-center\",\n          text: \"MSPID\"\n        }],\n        tbody: [_defineProperty({\n          data: [{\n            text: dataSource[0]\n          }, {\n            className: \"text-center\",\n            text: dataSource[1]\n          }, {\n            className: \"text-center\",\n            text: dataSource[2]\n          }, {\n            className: \"text-center\",\n            text: dataSource[3]\n          }]\n        }, \"data\", [{\n          text: dataSource[0]\n        }, {\n          className: \"text-center\",\n          text: dataSource[1]\n        }, {\n          className: \"text-center\",\n          text: dataSource[2]\n        }, {\n          className: \"text-center\",\n          text: dataSource[3]\n        }])],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))))))));\n    }\n  }]);\n\n  return bitcoinNetwork;\n}(React.Component);\n\nexport default bitcoinNetwork;","map":{"version":3,"sources":["/frontend/src/views/hyperledger/network.js"],"names":["React","Card","CardHeader","CardBody","CardTitle","Row","Col","SortingTable","dataSource","url","getData","urlData","XMLHttpRequest","channelData","open","onreadystatechange","readyState","status","process","alert","send","data","responseText","parseData","JSON","parse","datasource","temp_data_array","temp_data","index","length","push","stringify","bitcoinNetwork","size","offset","text","className","Component"],"mappings":"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","sourcesContent":["import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from \"react\";\nimport { Card, CardHeader, CardBody, CardTitle, Row, Col } from \"reactstrap\";\nimport SortingTable from \"../../components/SortingTable/SortingTable_.js\";\n\nlet dataSource=[];\nlet url = \"http://bcmon.kmu.ac.kr/hyperledger/data/network\";\n\n//Get representative data\nfunction getData(url){\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  var channelData=[];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  urlData.onreadystatechange = function(){\n      if(urlData.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(urlData.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n            channelData = process(urlData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n            //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n              return channelData\n          }else{\n                alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  urlData.send(null);\n  return channelData;\n}\n\nfunction process(urlData){ // 프로세스를 부름\n  var data = urlData.responseText; // get은 Text 방식으로, chartExample4\n  var parseData = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource = {};\n\n  var temp_data_array = [];\n  var temp_data = {};\n\n  for(var index=0; index<parseData.length;index++){\n    temp_data = parseData[index][\"peer_name\"];\n    datasource.push(JSON.stringify(temp_data));\n  \n    temp_data = parseData[index][\"request_url\"];\n    datasource.push(temp_data);\n  \n    temp_data = parseData[index][\"peer_type\"];\n    datasource.push(JSON.stringify(temp_data));\n  \n    temp_data = parseData[index][\"mspid\"];\n    datasource.push(JSON.stringify(temp_data)); \n  }\n  return datasource;\n}\n\nclass bitcoinNetwork extends React.Component {\n  render() {\n    dataSource=getData(url);    \n\n    return (\n      <>\n        <div className=\"content\">\n        <h2 className=\"text-center\">Hyperledger Network<br /><br /></h2>\n          <div className=\"content\">\n          <Row>\n              <Col xm=\"12\" md={{ size: 10, offset: 1 }}>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                    </CardTitle>\n                    </CardHeader>\n                    <CardBody>\n                      <SortingTable\n                        thead={[\n                          { text: \"Peer Name\" },\n                          { className: \"text-center\", text: \"Request URL\" },\n                          { className: \"text-center\", text: \"Peer Type\" },\n                          { className: \"text-center\", text: \"MSPID\" },\n                        ]}                    \n                        tbody={[\n                          {\n                            data: [\n                              { text: dataSource[0] },\n                              { className: \"text-center\", text: dataSource[1] },\n                              { className: \"text-center\", text: dataSource[2] },\n                              { className: \"text-center\", text: dataSource[3] },\n                            ],\n                            data: [\n                              { text: dataSource[0] },\n                              { className: \"text-center\", text: dataSource[1] },\n                              { className: \"text-center\", text: dataSource[2] },\n                              { className: \"text-center\", text: dataSource[3] },\n                            ]\n                          }\n                        ]}\n                      />\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default bitcoinNetwork;\n"]},"metadata":{},"sourceType":"module"}