{"ast":null,"code":"var result_tableData;\n\nfunction sleep(delay) {\n  var start = new Date().getTime();\n\n  while (new Date().getTime() < start + delay) {\n    ;\n  }\n}\n\nfunction renderTableData(url) {\n  var get_nodeData = new XMLHttpRequest(); // get_nodeData은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  get_nodeData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  // 값이 1이면 서버와의 연결이 성사됨\n\n  get_nodeData.onreadystatechange = function () {\n    console.log(\"onreadystatechange function\");\n\n    if (get_nodeData.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (get_nodeData.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        result_tableData = getTableData(get_nodeData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n\n        return result_tableData;\n      } else {\n        alert(\"Ethereum Node discovery 데이터 요청 실패:\" + get_nodeData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  try {\n    get_nodeData.send(null);\n  } catch (e) {\n    return result_tableData;\n  }\n\n  return result_tableData;\n}\n\nfunction getTableData(get_nodeData) {\n  var data = get_nodeData.responseText;\n  var dataParse = JSON.parse(data);\n  var dataObject = dataParse[0];\n  var tableDataList = [];\n  var date_ = dataObject._id;\n  var total_node = 0;\n  delete dataObject._id;\n\n  for (var key in dataObject) {\n    //console.log(\"key: \"+key+\", value\"+dataObject[key]);\n    var country_node = {\n      'country': key,\n      'node_count': dataObject[key]\n    };\n    total_node = total_node + dataObject[key];\n    tableDataList.append(country_node);\n  }\n\n  console.log(tableDataList);\n  return dataParse;\n}\n\nmodule.exports = {\n  sleep: sleep,\n  renderTableData: renderTableData\n};","map":{"version":3,"sources":["/project/src/variables/chartData.js"],"names":["result_tableData","sleep","delay","start","Date","getTime","renderTableData","url","get_nodeData","XMLHttpRequest","open","onreadystatechange","console","log","readyState","status","getTableData","alert","send","e","data","responseText","dataParse","JSON","parse","dataObject","tableDataList","date_","_id","total_node","key","country_node","append","module","exports"],"mappings":"AAAA,IAAIA,gBAAJ;;AAEA,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,SAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAK,GAAGD,KAAtC;AAA4C;AAA5C;AACD;;AAED,SAASI,eAAT,CAAyBC,GAAzB,EAA6B;AAC3B,MAAIC,YAAY,GAAG,IAAIC,cAAJ,EAAnB,CAD2B,CACc;;AACzCD,EAAAA,YAAY,CAACE,IAAb,CAAkB,KAAlB,EAAyBH,GAAzB,EAA8B,KAA9B,EAF2B,CAEW;AACtC;;AACAC,EAAAA,YAAY,CAACG,kBAAb,GAAkC,YAAU;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AACE,QAAGL,YAAY,CAACM,UAAb,KAA4B,CAA/B,EAAiC;AAAE;AAC/B,UAAGN,YAAY,CAACO,MAAb,KAAwB,GAA3B,EAA+B;AAAE;AAC7Bf,QAAAA,gBAAgB,GAAGgB,YAAY,CAACR,YAAD,CAA/B,CAD2B,CACoB;;AAC/C,eAAOR,gBAAP;AACH,OAHD,MAGK;AACCiB,QAAAA,KAAK,CAAC,uCAAuCT,YAAY,CAACO,MAArD,CAAL,CADD,CACoE;AACxE;AACJ;AACJ,GAVD;;AAWA,MAAI;AACFP,IAAAA,YAAY,CAACU,IAAb,CAAkB,IAAlB;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAOnB,gBAAP;AACD;;AAED,SAAOA,gBAAP;AACD;;AAED,SAASgB,YAAT,CAAsBR,YAAtB,EAAmC;AACjC,MAAIY,IAAI,GAAGZ,YAAY,CAACa,YAAxB;AACA,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB;AACA,MAAIK,UAAU,GAAGH,SAAS,CAAC,CAAD,CAA1B;AAEA,MAAII,aAAa,GAAG,EAApB;AAEA,MAAIC,KAAK,GAAGF,UAAU,CAACG,GAAvB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,SAAOJ,UAAU,CAACG,GAAlB;;AAEA,OAAK,IAAIE,GAAT,IAAgBL,UAAhB,EAA2B;AACzB;AACA,QAAIM,YAAY,GAAG;AACjB,iBAAWD,GADM;AAEjB,oBAAcL,UAAU,CAACK,GAAD;AAFP,KAAnB;AAKAD,IAAAA,UAAU,GAAGA,UAAU,GAAGJ,UAAU,CAACK,GAAD,CAApC;AACAJ,IAAAA,aAAa,CAACM,MAAd,CAAqBD,YAArB;AACD;;AACDnB,EAAAA,OAAO,CAACC,GAAR,CAAYa,aAAZ;AAEA,SAAOJ,SAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiB;AACfjC,EAAAA,KAAK,EAALA,KADe;AAEfK,EAAAA,eAAe,EAAfA;AAFe,CAAjB","sourcesContent":["var result_tableData;\n\nfunction sleep (delay) {\n  var start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\nfunction renderTableData(url){\n  var get_nodeData = new XMLHttpRequest(); // get_nodeData은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  get_nodeData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  // 값이 1이면 서버와의 연결이 성사됨\n  get_nodeData.onreadystatechange = function(){\n    console.log(\"onreadystatechange function\");\n      if(get_nodeData.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(get_nodeData.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n              result_tableData = getTableData(get_nodeData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n              return result_tableData;\n          }else{\n                alert(\"Ethereum Node discovery 데이터 요청 실패:\" + get_nodeData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  try {\n    get_nodeData.send(null);\n  } catch (e) {\n    return result_tableData;\n  }\n\n  return result_tableData;\n}\n\nfunction getTableData(get_nodeData){\n  var data = get_nodeData.responseText;\n  var dataParse = JSON.parse(data);\n  var dataObject = dataParse[0];\n\n  var tableDataList = [];\n\n  var date_ = dataObject._id;\n  var total_node = 0;\n  delete dataObject._id;\n\n  for (var key in dataObject){\n    //console.log(\"key: \"+key+\", value\"+dataObject[key]);\n    var country_node = {\n      'country': key,\n      'node_count': dataObject[key]\n    };\n\n    total_node = total_node + dataObject[key];\n    tableDataList.append(country_node)\n  }\n  console.log(tableDataList);\n\n  return dataParse\n}\n\nmodule.exports = {\n  sleep,\n  renderTableData\n};\n"]},"metadata":{},"sourceType":"module"}