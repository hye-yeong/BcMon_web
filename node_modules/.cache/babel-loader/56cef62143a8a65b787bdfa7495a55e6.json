{"ast":null,"code":"// total data 출력시 사용\nvar result; //zoom in zoom out chart data\n\nfunction sleep(delay) {\n  var start = new Date().getTime();\n\n  while (new Date().getTime() < start + delay) {\n    ;\n  }\n} //render zoom in zoom out graph\n\n\nfunction renderZoomChart(url, tag, title, caption) {\n  var graph_data = new XMLHttpRequest(); // graph_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  graph_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  graph_data.onreadystatechange = function () {\n    if (graph_data.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (graph_data.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        result = process(tag, title, caption, graph_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n\n        return result;\n      } else {\n        alert(title + \"그래프 데이터 요청 실패:\" + graph_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  graph_data.send(null);\n  return result;\n}\n\nfunction process(tag, title, caption, graph_data) {\n  // 프로세스를 부름\n  var data = graph_data.responseText; // get은 Text 방식으로\n\n  var dataParse = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource = {};\n  var dataList = [];\n  console.log(dataParse);\n  console.log(dataParse);\n\n  for (var index = 0; index < dataParse.length; index++) {\n    var data_temp = {\n      'label': dataParse[index]._id,\n      'value': dataParse[index][tag]\n    };\n    dataList.push(data_temp);\n  }\n\n  datasource = {\n    chart: {\n      caption: title,\n      subcaption: caption,\n      xaxisname: \"Block Height\",\n      yaxisname: \"Propagation Time(sec)\",\n      theme: \"candy\"\n    },\n    data: dataList\n  };\n  return datasource;\n}\n\nmodule.exports = {\n  sleep: sleep,\n  renderZoomChart: renderZoomChart\n};","map":{"version":3,"sources":["/project/src/variables/charts_cmpBlock.js"],"names":["result","sleep","delay","start","Date","getTime","renderZoomChart","url","tag","title","caption","graph_data","XMLHttpRequest","open","onreadystatechange","readyState","status","process","alert","send","data","responseText","dataParse","JSON","parse","datasource","dataList","console","log","index","length","data_temp","_id","push","chart","subcaption","xaxisname","yaxisname","theme","module","exports"],"mappings":"AAAA;AACA,IAAIA,MAAJ,C,CAAY;;AAEZ,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,SAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAK,GAAGD,KAAtC;AAA4C;AAA5C;AACD,C,CAED;;;AACA,SAASI,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0CC,OAA1C,EAAkD;AAChD,MAAIC,UAAU,GAAG,IAAIC,cAAJ,EAAjB,CADgD,CACT;;AACvCD,EAAAA,UAAU,CAACE,IAAX,CAAgB,KAAhB,EAAuBN,GAAvB,EAA4B,KAA5B,EAFgD,CAEZ;;AACpCI,EAAAA,UAAU,CAACG,kBAAX,GAAgC,YAAU;AACtC,QAAGH,UAAU,CAACI,UAAX,KAA0B,CAA7B,EAA+B;AAAE;AAC7B,UAAGJ,UAAU,CAACK,MAAX,KAAsB,GAAzB,EAA6B;AAAE;AAC3BhB,QAAAA,MAAM,GAAGiB,OAAO,CAACT,GAAD,EAAMC,KAAN,EAAaC,OAAb,EAAsBC,UAAtB,CAAhB,CADyB,CAC0B;;AACnD,eAAOX,MAAP;AACH,OAHD,MAGK;AACCkB,QAAAA,KAAK,CAACT,KAAK,GAAC,gBAAN,GAAyBE,UAAU,CAACK,MAArC,CAAL,CADD,CACoD;AACxD;AACJ;AACJ,GATD;;AAUAL,EAAAA,UAAU,CAACQ,IAAX,CAAgB,IAAhB;AACA,SAAOnB,MAAP;AACD;;AAED,SAASiB,OAAT,CAAiBT,GAAjB,EAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCC,UAAtC,EAAiD;AAAG;AAClD,MAAIS,IAAI,GAAGT,UAAU,CAACU,YAAtB,CAD+C,CACF;;AAC7C,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB,CAF+C,CAET;;AAEtC,MAAIK,UAAU,GAAG,EAAjB;AACA,MAAIC,QAAQ,GAAG,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;;AACA,OAAK,IAAIO,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,SAAS,CAACQ,MAAtC,EAA8CD,KAAK,EAAnD,EAAsD;AACpD,QAAIE,SAAS,GAAG;AACd,eAAST,SAAS,CAACO,KAAD,CAAT,CAAiBG,GADZ;AAEd,eAASV,SAAS,CAACO,KAAD,CAAT,CAAiBrB,GAAjB;AAFK,KAAhB;AAKAkB,IAAAA,QAAQ,CAACO,IAAT,CAAcF,SAAd;AACD;;AAEDN,EAAAA,UAAU,GAAG;AACXS,IAAAA,KAAK,EAAE;AACLxB,MAAAA,OAAO,EAAED,KADJ;AAEL0B,MAAAA,UAAU,EAAEzB,OAFP;AAGL0B,MAAAA,SAAS,EAAE,cAHN;AAILC,MAAAA,SAAS,EAAE,uBAJN;AAKLC,MAAAA,KAAK,EAAE;AALF,KADI;AAQXlB,IAAAA,IAAI,EAAEM;AARK,GAAb;AAWF,SAAOD,UAAP;AACC;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACfvC,EAAAA,KAAK,EAALA,KADe;AAEfK,EAAAA,eAAe,EAAfA;AAFe,CAAjB","sourcesContent":["// total data 출력시 사용\nlet result; //zoom in zoom out chart data\n\nfunction sleep (delay) {\n  var start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\n//render zoom in zoom out graph\nfunction renderZoomChart(url, tag, title, caption){\n  var graph_data = new XMLHttpRequest(); // graph_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  graph_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  graph_data.onreadystatechange = function(){\n      if(graph_data.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(graph_data.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n              result = process(tag, title, caption, graph_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n              return result;\n          }else{\n                alert(title+\"그래프 데이터 요청 실패:\" + graph_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  graph_data.send(null);\n  return result;\n}\n\nfunction process(tag, title, caption, graph_data){  // 프로세스를 부름\n  var data = graph_data.responseText;          // get은 Text 방식으로\n  var dataParse = JSON.parse(data);     //객체화 : 배열 처리\n\n  var datasource = {};\n  var dataList = [];\n\n  console.log(dataParse);\n  console.log(dataParse);\n  for (var index = 0; index < dataParse.length; index++){\n    var data_temp = {\n      'label': dataParse[index]._id,\n      'value': dataParse[index][tag]\n    };\n\n    dataList.push(data_temp);\n  }\n\n  datasource = {\n    chart: {\n      caption: title,\n      subcaption: caption,\n      xaxisname: \"Block Height\",\n      yaxisname: \"Propagation Time(sec)\",\n      theme: \"candy\",\n    },\n    data: dataList\n  };\n\nreturn datasource;\n}\n\nmodule.exports = {\n  sleep,\n  renderZoomChart,\n};\n"]},"metadata":{},"sourceType":"module"}