{"ast":null,"code":"import _classCallCheck from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/project/src/views/hyperledger/ChainCode.js\";\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from \"react\";\nimport { Card, CardHeader, CardTitle, CardBody, Row, Col } from \"reactstrap\";\nimport SortingTable from \"../../components/SortingTable/SortingTable_.js\"; // core components_chart 입력하는 부분_\n// 아래에 차트 이름과, 차트 경로를 입력하면 된다.\n\nimport chartData from \"../../variables/charts_month.js\";\nimport ReactFC from 'react-fusioncharts';\nimport ReactFusioncharts from \"react-fusioncharts\";\nimport FusionCharts from 'fusioncharts';\nimport charts from 'fusioncharts/fusioncharts.charts';\nimport Zoomline from \"fusioncharts/fusioncharts.zoomline\";\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nReactFC.fcRoot(FusionCharts, charts, Zoomline, FusionTheme);\ncharts(FusionCharts);\nvar dataSource = [];\nvar tableDataSource = [];\nvar url = [\"http://bcmon.kmu.ac.kr/hyperledger/graphs/chaincode\", \"http://bcmon.kmu.ac.kr/hyperledger/data/chaincode\"];\nvar tag = \"txcount\";\nvar title = \"chaincode\";\nvar caption = \"mycc chaincode\";\n\nfunction getData(url) {\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  var channelData = [];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  urlData.onreadystatechange = function () {\n    if (urlData.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (urlData.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        channelData = process(urlData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n        //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n\n        return channelData;\n      } else {\n        alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  try {\n    urlData.send(null);\n  } catch (e) {\n    return channelData;\n  }\n\n  return channelData;\n}\n\nfunction process(urlData) {\n  // 프로세스를 부름\n  var data = urlData.responseText; // get은 Text 방식으로, chartExample4\n\n  var parseData = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource_ = [];\n  var temp_data = {};\n\n  for (var index = 0; index < parseData.length; index++) {\n    temp_data = parseData[index][\"name\"];\n    datasource_.push(temp_data);\n    temp_data = parseData[index][\"chaincode_name\"];\n    datasource_.push(temp_data);\n    temp_data = parseData[index][\"path\"];\n    datasource_.push(temp_data);\n    temp_data = parseData[index][\"txcount\"];\n    datasource_.push(temp_data);\n    temp_data = parseData[index][\"version\"];\n    datasource_.push(temp_data);\n  }\n\n  return datasource_;\n}\n\nvar hyperledgerChainCode =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(hyperledgerChainCode, _React$Component);\n\n  function hyperledgerChainCode() {\n    _classCallCheck(this, hyperledgerChainCode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(hyperledgerChainCode).apply(this, arguments));\n  }\n\n  _createClass(hyperledgerChainCode, [{\n    key: \"render\",\n    value: function render() {\n      dataSource[0] = chartData.renderGraph(url[0], tag, title, caption, 0);\n      tableDataSource = getData(url[1]);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Hyperledger Chaincode\"), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"card-firstoutline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"card-mini\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chart-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(ReactFusioncharts, {\n        type: \"column2d\",\n        className: \"mychart\",\n        width: \"100%\",\n        height: \"300\",\n        dataFormat: \"JSON\",\n        dataSource: dataSource[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))))), React.createElement(Col, {\n        lg: \"9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        \"font-weight\": \"500\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Chacode Detail Data \")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(SortingTable, {\n        thead: [{\n          text: \"Chaincode Name\"\n        }, {\n          className: \"text-center\",\n          text: \"Channel Name\"\n        }, {\n          className: \"text-center\",\n          text: \"Path\"\n        }, {\n          className: \"text-center\",\n          text: \"Transaction Count\"\n        }, {\n          className: \"text-center\",\n          text: \"Version\"\n        }],\n        tbody: [{\n          data: [{\n            text: tableDataSource[0]\n          }, {\n            className: \"text-center\",\n            text: tableDataSource[1]\n          }, {\n            className: \"text-center\",\n            text: tableDataSource[2]\n          }, {\n            className: \"text-center\",\n            text: tableDataSource[3]\n          }, {\n            className: \"text-center\",\n            text: tableDataSource[4]\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })))))))));\n    }\n  }]);\n\n  return hyperledgerChainCode;\n}(React.Component);\n\nexport default hyperledgerChainCode;","map":{"version":3,"sources":["/project/src/views/hyperledger/ChainCode.js"],"names":["React","Card","CardHeader","CardTitle","CardBody","Row","Col","SortingTable","chartData","ReactFC","ReactFusioncharts","FusionCharts","charts","Zoomline","FusionTheme","fcRoot","dataSource","tableDataSource","url","tag","title","caption","getData","urlData","XMLHttpRequest","channelData","open","onreadystatechange","readyState","status","process","alert","send","e","data","responseText","parseData","JSON","parse","datasource_","temp_data","index","length","push","hyperledgerChainCode","renderGraph","text","className","Component"],"mappings":";;;;;;AAAA,OAAO,yBAAP;AACA,OAAO,2BAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,GAAhD,EAAqDC,GAArD,QAAgE,YAAhE;AACA,OAAOC,YAAP,MAAyB,gDAAzB,C,CAEA;AACA;;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,WAAP,MAAwB,+CAAxB;AAEAL,OAAO,CAACM,MAAR,CAAeJ,YAAf,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,WAA/C;AACAF,MAAM,CAACD,YAAD,CAAN;AAEA,IAAIK,UAAU,GAAG,EAAjB;AACA,IAAIC,eAAe,GAAG,EAAtB;AACA,IAAIC,GAAG,GAAG,CACR,qDADQ,EAER,mDAFQ,CAAV;AAIA,IAAIC,GAAG,GAAG,SAAV;AACA,IAAIC,KAAK,GAAG,WAAZ;AACA,IAAIC,OAAO,GAAG,gBAAd;;AAEA,SAASC,OAAT,CAAiBJ,GAAjB,EAAqB;AACnB,MAAIK,OAAO,GAAG,IAAIC,cAAJ,EAAd,CADmB,CACiB;;AACpC,MAAIC,WAAW,GAAC,EAAhB;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoBR,GAApB,EAAyB,KAAzB,EAHmB,CAGc;;AACjCK,EAAAA,OAAO,CAACI,kBAAR,GAA6B,YAAU;AACnC,QAAGJ,OAAO,CAACK,UAAR,KAAuB,CAA1B,EAA4B;AAAE;AAC1B,UAAGL,OAAO,CAACM,MAAR,KAAmB,GAAtB,EAA0B;AAAE;AAC1BJ,QAAAA,WAAW,GAAGK,OAAO,CAACP,OAAD,CAArB,CADwB,CACQ;AAChC;;AACE,eAAOE,WAAP;AACH,OAJD,MAIK;AACCM,QAAAA,KAAK,CAAC,WAAWR,OAAO,CAACM,MAApB,CAAL,CADD,CACmC;AACvC;AACJ;AACJ,GAVD;;AAYA,MAAI;AACFN,IAAAA,OAAO,CAACS,IAAR,CAAa,IAAb;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAOR,WAAP;AACD;;AACD,SAAOA,WAAP;AACD;;AAED,SAASK,OAAT,CAAiBP,OAAjB,EAAyB;AAAE;AACzB,MAAIW,IAAI,GAAGX,OAAO,CAACY,YAAnB,CADuB,CACU;;AACjC,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB,CAFuB,CAEW;;AAElC,MAAIK,WAAW,GAAG,EAAlB;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,OAAI,IAAIC,KAAK,GAAC,CAAd,EAAiBA,KAAK,GAACL,SAAS,CAACM,MAAjC,EAAwCD,KAAK,EAA7C,EAAgD;AAC9CD,IAAAA,SAAS,GAAGJ,SAAS,CAACK,KAAD,CAAT,CAAiB,MAAjB,CAAZ;AACAF,IAAAA,WAAW,CAACI,IAAZ,CAAiBH,SAAjB;AAEAA,IAAAA,SAAS,GAAGJ,SAAS,CAACK,KAAD,CAAT,CAAiB,gBAAjB,CAAZ;AACAF,IAAAA,WAAW,CAACI,IAAZ,CAAiBH,SAAjB;AAEAA,IAAAA,SAAS,GAAGJ,SAAS,CAACK,KAAD,CAAT,CAAiB,MAAjB,CAAZ;AACAF,IAAAA,WAAW,CAACI,IAAZ,CAAiBH,SAAjB;AAEAA,IAAAA,SAAS,GAAGJ,SAAS,CAACK,KAAD,CAAT,CAAiB,SAAjB,CAAZ;AACAF,IAAAA,WAAW,CAACI,IAAZ,CAAiBH,SAAjB;AAEAA,IAAAA,SAAS,GAAGJ,SAAS,CAACK,KAAD,CAAT,CAAiB,SAAjB,CAAZ;AACAF,IAAAA,WAAW,CAACI,IAAZ,CAAiBH,SAAjB;AACD;;AACD,SAAOD,WAAP;AACD;;IAEKK,oB;;;;;;;;;;;;;6BACK;AACP5B,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBR,SAAS,CAACqC,WAAV,CAAsB3B,GAAG,CAAC,CAAD,CAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0CC,OAA1C,EAAmD,CAAnD,CAAhB;AACAJ,MAAAA,eAAe,GAACK,OAAO,CAACJ,GAAG,CAAC,CAAD,CAAJ,CAAvB;AAEA,aACE,0CACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAKE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,iBAAD;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,SAAS,EAAG,SAFhB;AAGI,QAAA,KAAK,EAAC,MAHV;AAII,QAAA,MAAM,EAAC,KAJX;AAKI,QAAA,UAAU,EAAC,MALf;AAMI,QAAA,UAAU,EAAEF,UAAU,CAAC,CAAD,CAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,CADF,CADF,EAiBE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,uBAAY,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CADF,EAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,YAAD;AACG,QAAA,KAAK,EAAE,CACL;AAAE8B,UAAAA,IAAI,EAAE;AAAR,SADK,EAEL;AAAEC,UAAAA,SAAS,EAAE,aAAb;AAA4BD,UAAAA,IAAI,EAAE;AAAlC,SAFK,EAGL;AAAEC,UAAAA,SAAS,EAAE,aAAb;AAA4BD,UAAAA,IAAI,EAAE;AAAlC,SAHK,EAIL;AAAEC,UAAAA,SAAS,EAAE,aAAb;AAA4BD,UAAAA,IAAI,EAAE;AAAlC,SAJK,EAKL;AAAEC,UAAAA,SAAS,EAAE,aAAb;AAA4BD,UAAAA,IAAI,EAAE;AAAlC,SALK,CADV;AAQG,QAAA,KAAK,EAAE,CACL;AACEZ,UAAAA,IAAI,EAAE,CACJ;AAAEY,YAAAA,IAAI,EAAE7B,eAAe,CAAC,CAAD;AAAvB,WADI,EAEJ;AAAE8B,YAAAA,SAAS,EAAE,aAAb;AAA4BD,YAAAA,IAAI,EAAE7B,eAAe,CAAC,CAAD;AAAjD,WAFI,EAGJ;AAAE8B,YAAAA,SAAS,EAAE,aAAb;AAA4BD,YAAAA,IAAI,EAAE7B,eAAe,CAAC,CAAD;AAAjD,WAHI,EAIJ;AAAE8B,YAAAA,SAAS,EAAE,aAAb;AAA4BD,YAAAA,IAAI,EAAE7B,eAAe,CAAC,CAAD;AAAjD,WAJI,EAKJ;AAAE8B,YAAAA,SAAS,EAAE,aAAb;AAA4BD,YAAAA,IAAI,EAAE7B,eAAe,CAAC,CAAD;AAAjD,WALI;AADR,SADK,CARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CAJF,CADA,CAjBF,CALF,CADF,CAFF,CADF,CADF;AA8DD;;;;EAnEgCjB,KAAK,CAACgD,S;;AAyEzC,eAAeJ,oBAAf","sourcesContent":["import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from \"react\";\nimport { Card, CardHeader, CardTitle, CardBody, Row, Col } from \"reactstrap\";\nimport SortingTable from \"../../components/SortingTable/SortingTable_.js\";\n\n// core components_chart 입력하는 부분_\n// 아래에 차트 이름과, 차트 경로를 입력하면 된다.\nimport chartData from \"../../variables/charts_month.js\";\nimport ReactFC from 'react-fusioncharts';\nimport ReactFusioncharts from \"react-fusioncharts\";\nimport FusionCharts from 'fusioncharts';\nimport charts from 'fusioncharts/fusioncharts.charts';\nimport Zoomline from \"fusioncharts/fusioncharts.zoomline\";\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, charts, Zoomline, FusionTheme);\ncharts(FusionCharts);\n\nlet dataSource = [];\nlet tableDataSource = [];\nlet url = [\n  \"http://bcmon.kmu.ac.kr/hyperledger/graphs/chaincode\",\n  \"http://bcmon.kmu.ac.kr/hyperledger/data/chaincode\"\n];\nvar tag = \"txcount\";\nvar title = \"chaincode\";\nvar caption = \"mycc chaincode\";\n\nfunction getData(url){\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  var channelData=[];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  urlData.onreadystatechange = function(){\n      if(urlData.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(urlData.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n            channelData = process(urlData); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n            //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n              return channelData\n          }else{\n                alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n\n  try {\n    urlData.send(null);\n  } catch (e) {\n    return channelData;\n  }\n  return channelData;\n}\n\nfunction process(urlData){ // 프로세스를 부름\n  var data = urlData.responseText; // get은 Text 방식으로, chartExample4\n  var parseData = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource_ = [];\n  var temp_data = {};\n\n  for(var index=0; index<parseData.length;index++){\n    temp_data = parseData[index][\"name\"];\n    datasource_.push(temp_data);\n  \n    temp_data = parseData[index][\"chaincode_name\"];\n    datasource_.push(temp_data);\n  \n    temp_data = parseData[index][\"path\"];\n    datasource_.push(temp_data);\n  \n    temp_data = parseData[index][\"txcount\"];\n    datasource_.push(temp_data); \n\n    temp_data = parseData[index][\"version\"];\n    datasource_.push(temp_data); \n  }\n  return datasource_;\n}\n\nclass hyperledgerChainCode extends React.Component {\n  render() {\n    dataSource[0] = chartData.renderGraph(url[0], tag, title, caption, 0);\n    tableDataSource=getData(url[1]); \n  \n    return (\n      <>\n        <div className=\"content\">\n          <h2 className=\"text-center\">Hyperledger Chaincode</h2>\n          <div className=\"content\">\n            <Card className=\"card-firstoutline\">\n              <CardHeader>\n                <CardTitle>\n                </CardTitle>\n              </CardHeader>\n              <Row>\n                <Col lg=\"3\">\n                  <Card className=\"card-mini\">\n                    <CardBody>\n                      <div className=\"chart-area\" >\n                        <ReactFusioncharts\n                            type=\"column2d\"\n                            className = \"mychart\"\n                            width=\"100%\"\n                            height=\"300\"\n                            dataFormat=\"JSON\"\n                            dataSource={dataSource[0]}\n                          />\n                      </div>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg=\"9\">\n                <Card>\n                  <CardHeader>\n                    <h4 font-weight=\"500\">Chacode Detail Data </h4>\n                  </CardHeader>\n                  <CardBody>\n                     <SortingTable\n                        thead={[\n                          { text: \"Chaincode Name\" },\n                          { className: \"text-center\", text: \"Channel Name\" },\n                          { className: \"text-center\", text: \"Path\" },\n                          { className: \"text-center\", text: \"Transaction Count\" },\n                          { className: \"text-center\", text: \"Version\" },\n                        ]}                    \n                        tbody={[\n                          {\n                            data: [\n                              { text: tableDataSource[0] },\n                              { className: \"text-center\", text: tableDataSource[1] },\n                              { className: \"text-center\", text: tableDataSource[2] },\n                              { className: \"text-center\", text: tableDataSource[3] },\n                              { className: \"text-center\", text: tableDataSource[4] },\n                            ]\n                          }\n                        ]}\n                      />\n                  </CardBody>\n                </Card>\n              </Col>\n              </Row>\n            </Card>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\n\n\n\nexport default hyperledgerChainCode;\n"]},"metadata":{},"sourceType":"module"}