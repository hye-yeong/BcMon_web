{"ast":null,"code":"var result_tableData;\n\nfunction sleep(delay) {\n  var start = new Date().getTime();\n\n  while (new Date().getTime() < start + delay) {\n    ;\n  }\n}\n\nfunction renderTableData(url, limit) {\n  var get_nodeData = new XMLHttpRequest(); // get_nodeData은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  get_nodeData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  // 값이 1이면 서버와의 연결이 성사됨\n\n  get_nodeData.onreadystatechange = function () {\n    console.log(\"onreadystatechange function\");\n\n    if (get_nodeData.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (get_nodeData.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        result_tableData = getTableData(get_nodeData, limit); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n\n        return result_tableData;\n      } else {\n        alert(\"Ethereum Node discovery 데이터 요청 실패:\" + get_nodeData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  try {\n    get_nodeData.send(null);\n  } catch (e) {\n    return result_tableData;\n  }\n\n  return result_tableData;\n}\n\nfunction getTableData(get_nodeData, limit) {\n  var data = get_nodeData.responseText;\n  var dataParse = JSON.parse(data);\n  var dataObject = dataParse[0];\n  var renderData = [];\n  var tableDataList = [];\n  var tableDataList_limit = 0; //var date_ = dataObject._id;\n\n  renderData.push({\n    'date': dataObject._id\n  });\n  var total_node = 0;\n  delete dataObject._id;\n\n  for (var key in dataObject) {\n    total_node = total_node + dataObject[key];\n  }\n\n  for (var key in dataObject) {\n    //console.log(\"key: \"+key+\", value\"+dataObject[key]);\n    var country_node = {\n      'country': key,\n      'node_count': dataObject[key],\n      'ratio': Math.floor(dataObject[key] / total_node)\n    };\n    tableDataList.push(country_node);\n  }\n\n  tableDataList.sort(function (a, b) {\n    return a.node_count > b.node_count ? -1 : a.node_count < b.node_count ? 1 : 0;\n  });\n\n  if (limit == 5) {\n    tableDataList_limit = tableDataList.slice(0, 5);\n  } else {\n    tableDataList_limit = tableDataList;\n  }\n\n  renderData.push(tableDataList_limit);\n  renderData.push({\n    'total_node': total_node\n  }); //console.log(renderData);\n\n  return renderData;\n}\n\nmodule.exports = {\n  sleep: sleep,\n  renderTableData: renderTableData\n};","map":{"version":3,"sources":["/project/src/variables/chartData.js"],"names":["result_tableData","sleep","delay","start","Date","getTime","renderTableData","url","limit","get_nodeData","XMLHttpRequest","open","onreadystatechange","console","log","readyState","status","getTableData","alert","send","e","data","responseText","dataParse","JSON","parse","dataObject","renderData","tableDataList","tableDataList_limit","push","_id","total_node","key","country_node","Math","floor","sort","a","b","node_count","slice","module","exports"],"mappings":"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","sourcesContent":["var result_tableData;\n\nfunction sleep (delay) {\n  var start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\nfunction renderTableData(url, limit){\n  var get_nodeData = new XMLHttpRequest(); // get_nodeData은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  get_nodeData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  // 값이 1이면 서버와의 연결이 성사됨\n  get_nodeData.onreadystatechange = function(){\n    console.log(\"onreadystatechange function\");\n      if(get_nodeData.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(get_nodeData.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n              result_tableData = getTableData(get_nodeData, limit); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n              return result_tableData;\n          }else{\n                alert(\"Ethereum Node discovery 데이터 요청 실패:\" + get_nodeData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  try {\n    get_nodeData.send(null);\n  } catch (e) {\n    return result_tableData;\n  }\n\n  return result_tableData;\n}\n\nfunction getTableData(get_nodeData, limit){\n  var data = get_nodeData.responseText;\n  var dataParse = JSON.parse(data);\n  var dataObject = dataParse[0];\n\n  var renderData = [];\n  var tableDataList = [];\n  var tableDataList_limit = 0;\n\n  //var date_ = dataObject._id;\n  renderData.push({'date': dataObject._id});\n  var total_node = 0;\n\n  delete dataObject._id;\n\n  for (var key in dataObject){\n    total_node = total_node + dataObject[key];\n  }\n\n  for (var key in dataObject){\n    //console.log(\"key: \"+key+\", value\"+dataObject[key]);\n    var country_node = {\n      'country': key,\n      'node_count': dataObject[key],\n      'ratio': Math.floor(dataObject[key]/total_node)\n    };\n\n    tableDataList.push(country_node)\n  }\n\n  tableDataList.sort(function (a, b){\n    return a.node_count > b.node_count ? -1 : a.node_count < b.node_count ? 1 :0;\n  });\n\n  if (limit == 5) {\n    tableDataList_limit = tableDataList.slice(0,5)\n  }\n  else {\n    tableDataList_limit = tableDataList\n  }\n\n  renderData.push(tableDataList_limit);\n  renderData.push({'total_node': total_node});\n\n  //console.log(renderData);\n\n  return renderData\n}\n\nmodule.exports = {\n  sleep,\n  renderTableData\n};\n"]},"metadata":{},"sourceType":"module"}