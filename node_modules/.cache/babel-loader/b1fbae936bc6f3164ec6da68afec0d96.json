{"ast":null,"code":"import _classCallCheck from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/frontend/src/views/hyperledger/Channel.js\";\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from \"react\";\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\nvar dataSource = [];\nvar url = \"http://bcmon.kmu.ac.kr/hyperledger/graphs/transaction/transaction-month\";\nvar data = []; //Get representative data\n\nfunction getData(url) {\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  var channelData = [];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  urlData.onreadystatechange = function () {\n    if (urlData.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (urlData.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        channelData = process(tag, num); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n        //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n\n        return channelData;\n      } else {\n        alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  try {\n    representative_data[num].send(null);\n  } catch (e) {\n    return representative_dataSource[num];\n  }\n\n  return representative_dataSource[num];\n}\n\nvar hyperledgerChannel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(hyperledgerChannel, _React$Component);\n\n  function hyperledgerChannel() {\n    _classCallCheck(this, hyperledgerChannel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(hyperledgerChannel).apply(this, arguments));\n  }\n\n  _createClass(hyperledgerChannel, [{\n    key: \"render\",\n    value: function render() {\n      dataSource = getData(url);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Hyperledger Node\"), React.createElement(\"p\", {\n        className: \"category text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \".\"), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"card-chart2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chart-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, dataSource[0], React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }))))))))));\n    }\n  }]);\n\n  return hyperledgerChannel;\n}(React.Component);\n\nexport default hyperledgerChannel;","map":{"version":3,"sources":["/frontend/src/views/hyperledger/Channel.js"],"names":["React","Card","CardBody","Row","Col","dataSource","url","data","getData","urlData","XMLHttpRequest","channelData","open","onreadystatechange","readyState","status","process","tag","num","alert","representative_data","send","e","representative_dataSource","hyperledgerChannel","Component"],"mappings":";;;;;;AAAA,OAAO,yBAAP;AACA,OAAO,2BAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAyC,YAAzC;AAEA,IAAIC,UAAU,GAAC,EAAf;AACA,IAAIC,GAAG,GAAG,yEAAV;AACA,IAAIC,IAAI,GAAG,EAAX,C,CAEA;;AACA,SAASC,OAAT,CAAiBF,GAAjB,EAAqB;AACnB,MAAIG,OAAO,GAAG,IAAIC,cAAJ,EAAd,CADmB,CACiB;;AACpC,MAAIC,WAAW,GAAC,EAAhB;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoBN,GAApB,EAAyB,KAAzB,EAHmB,CAGc;;AACjCG,EAAAA,OAAO,CAACI,kBAAR,GAA6B,YAAU;AACnC,QAAGJ,OAAO,CAACK,UAAR,KAAuB,CAA1B,EAA4B;AAAE;AAC1B,UAAGL,OAAO,CAACM,MAAR,KAAmB,GAAtB,EAA0B;AAAE;AAC1BJ,QAAAA,WAAW,GAAGK,OAAO,CAACC,GAAD,EAAMC,GAAN,CAArB,CADwB,CACS;AACjC;;AACE,eAAOP,WAAP;AACH,OAJD,MAIK;AACCQ,QAAAA,KAAK,CAAC,WAAWV,OAAO,CAACM,MAApB,CAAL,CADD,CACmC;AACvC;AACJ;AACJ,GAVD;;AAWA,MAAI;AACFK,IAAAA,mBAAmB,CAACF,GAAD,CAAnB,CAAyBG,IAAzB,CAA8B,IAA9B;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAOC,yBAAyB,CAACL,GAAD,CAAhC;AACD;;AACD,SAAOK,yBAAyB,CAACL,GAAD,CAAhC;AACD;;IAEKM,kB;;;;;;;;;;;;;6BACK;AACPnB,MAAAA,UAAU,GAACG,OAAO,CAACF,GAAD,CAAlB;AAEA,aACE,0CACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,EAEA;AAAG,QAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,EAKE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,UAAU,CAAC,CAAD,CADb,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CADF,CADF,CADF,CADF,CADF,CALF,CADF,CADF;AA0BD;;;;EA9B8BL,KAAK,CAACyB,S;;AAiCvC,eAAeD,kBAAf","sourcesContent":["import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from \"react\";\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\n\nlet dataSource=[];\nlet url = \"http://bcmon.kmu.ac.kr/hyperledger/graphs/transaction/transaction-month\";\nvar data = [];\n\n//Get representative data\nfunction getData(url){\n  var urlData = new XMLHttpRequest(); // xhr은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  var channelData=[];\n  urlData.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  urlData.onreadystatechange = function(){\n      if(urlData.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(urlData.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n            channelData = process(tag, num); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n            //representative_dataSource[num] = parseInt(representative_dataSource[num]).toFixed(2) + \"\";\n              return channelData\n          }else{\n                alert(\"요청 실패:\" + urlData.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  try {\n    representative_data[num].send(null);\n  } catch (e) {\n    return representative_dataSource[num];\n  }\n  return representative_dataSource[num];\n}\n\nclass hyperledgerChannel extends React.Component {\n  render() {\n    dataSource=getData(url);    \n\n    return (\n      <>\n        <div className=\"content\">\n        <h2 className=\"text-center\">Hyperledger Node</h2>\n        <p className=\"category text-center\">\n          .\n        </p>\n          <div className=\"content\">\n            <Row>\n              <Col lg=\"4\">\n                <Card className=\"card-chart2\">\n                  <CardBody>\n                    <div className=\"chart-area\" >\n                      <p>\n                        {dataSource[0]}\n                        <br />\n                      </p>\n                    </div>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default hyperledgerChannel;\n"]},"metadata":{},"sourceType":"module"}