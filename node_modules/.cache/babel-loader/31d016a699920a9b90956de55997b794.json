{"ast":null,"code":"import _classCallCheck from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/project/src/views/advanced_analysis/ddos.js\";\nimport React from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport CandyTheme from 'fusioncharts/themes/fusioncharts.theme.candy';\nReactFC.fcRoot(FusionCharts, TimeSeries, FusionTheme, CandyTheme);\n\nvar jsonify = function jsonify(res) {\n  return res.json();\n};\n\nvar dataFetch = fetch(\"http://163.152.223.12:5000/get_data\").then(jsonify);\nvar schemaFetch = fetch(\"http://163.152.223.12:5000/get_schema\").then(jsonify);\nvar dataSource = {\n  chart: {\n    theme: \"candy\"\n  },\n  caption: {\n    text: \"DDoS prediction\"\n  },\n  subcaption: {\n    text: \"We predict whether DDoS attack will occur on the next day or not through the Bitcoin's block statistical data of the previous day.\"\n  },\n  series: \"Model\",\n  yaxis: [{\n    plot: [{\n      value: \"Score\",\n      type: \"column\"\n    }],\n    title: \"Detection Score\",\n    format: {\n      suffix: \"\"\n    }\n  }]\n};\n\nvar analysis_ddos = /*#__PURE__*/function (_React$Component) {\n  _inherits(analysis_ddos, _React$Component);\n\n  var _super = _createSuper(analysis_ddos);\n\n  function analysis_ddos(props) {\n    var _this;\n\n    _classCallCheck(this, analysis_ddos);\n\n    _this = _super.call(this, props);\n    _this.onFetchData = _this.onFetchData.bind(_assertThisInitialized(_this));\n    _this.state = {\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"1000\",\n        height: \"600\",\n        dataSource: dataSource\n      }\n    };\n    return _this;\n  }\n\n  _createClass(analysis_ddos, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onFetchData();\n    }\n  }, {\n    key: \"onFetchData\",\n    value: function onFetchData() {\n      var _this2 = this;\n\n      Promise.all([dataFetch, schemaFetch]).then(function (res) {\n        var data = res[0];\n        var schema = res[1];\n        console.log(data);\n        var fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n        var timeseriesDs = Object.assign({}, _this2.state.timeseriesDs);\n        timeseriesDs.dataSource.data = fusionTable;\n\n        _this2.setState({\n          timeseriesDs: timeseriesDs\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, this.state.timeseriesDs.dataSource.data ? /*#__PURE__*/React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      })) : \"loading\"));\n    }\n  }]);\n\n  return analysis_ddos;\n}(React.Component);\n\nexport default analysis_ddos;","map":{"version":3,"sources":["/project/src/views/advanced_analysis/ddos.js"],"names":["React","FusionCharts","TimeSeries","ReactFC","FusionTheme","CandyTheme","fcRoot","jsonify","res","json","dataFetch","fetch","then","schemaFetch","dataSource","chart","theme","caption","text","subcaption","series","yaxis","plot","value","type","title","format","suffix","analysis_ddos","props","onFetchData","bind","state","timeseriesDs","renderAt","width","height","Promise","all","data","schema","console","log","fusionTable","DataStore","createDataTable","Object","assign","setState","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"react-fusioncharts\"\n\n\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport CandyTheme from 'fusioncharts/themes/fusioncharts.theme.candy';\nReactFC.fcRoot(FusionCharts, TimeSeries, FusionTheme, CandyTheme);\n\n\nconst jsonify = res => res.json();\nconst dataFetch = fetch(\n  \"http://163.152.223.12:5000/get_data\"\n).then(jsonify);\n\nconst schemaFetch = fetch(\n  \"http://163.152.223.12:5000/get_schema\"\n).then(jsonify);\n\n\nconst dataSource = {\n  chart: {\n    theme: \"candy\",\n  },\n  caption: {\n    text: \"DDoS prediction\"\n  },\n  subcaption: {\n    text: \"We predict whether DDoS attack will occur on the next day or not through the Bitcoin's block statistical data of the previous day.\"\n  },\n  series: \"Model\",\n  yaxis: [\n    {\n      plot: [\n        {\n          value: \"Score\",\n          type: \"column\"\n        }\n      ],\n      title: \"Detection Score\",\n      format: {\n        suffix: \"\"\n      }\n    }\n  ]\n};\n\n\nclass analysis_ddos extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.onFetchData = this.onFetchData.bind(this);\n    this.state = {\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"1000\",\n        height: \"600\",\n        dataSource\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.onFetchData();\n  }\n\n  onFetchData() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n\n      console.log(data)\n\n      const fusionTable = new FusionCharts.DataStore().createDataTable(\n        data,\n        schema\n      );\n\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          {this.state.timeseriesDs.dataSource.data ? (\n            <ReactFC {...this.state.timeseriesDs} />\n          ) : (\n              \"loading\"\n            )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default analysis_ddos;\n"]},"metadata":{},"sourceType":"module"}