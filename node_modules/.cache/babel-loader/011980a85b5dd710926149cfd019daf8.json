{"ast":null,"code":"// total data 출력시 사용\nvar result; //zoom in zoom out chart data\n\nfunction sleep(delay) {\n  var start = new Date().getTime();\n\n  while (new Date().getTime() < start + delay) {\n    ;\n  }\n} //render zoom in zoom out graph\n\n\nfunction renderZoomChart(url, tag, title, caption) {\n  var graph_data = new XMLHttpRequest(); // graph_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  graph_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  graph_data.onreadystatechange = function () {\n    if (graph_data.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (graph_data.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        result = process(tag, title, caption, graph_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n\n        return result;\n      } else {\n        alert(title + \"그래프 데이터 요청 실패:\" + graph_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  graph_data.send(null);\n  return result;\n}\n\nfunction process(tag, title, caption, graph_data) {\n  // 프로세스를 부름\n  var data = graph_data.responseText; // get은 Text 방식으로\n\n  var dataParse = JSON.parse(data); //객체화 : 배열 처리\n\n  var dataObject = dataParse[0];\n  var datasource = {};\n  var label = {};\n  var value = {};\n  var temp_key = \"\";\n  var temp_value = \"\";\n  label = {\n    \"category\": \"\"\n  };\n  value = {\n    \"serisename\": \"test\",\n    \"data\": \"\"\n  };\n  dataParse.reverse();\n\n  for (var index = 0; index < dataParse.length; index++) {\n    temp_key += dataParse[index]._id + '|';\n    temp_value += dataParse[index][tag] + '|';\n  }\n\n  ;\n  temp_key = temp_key.slice(0, -1);\n  temp_value = temp_value.slice(0, -1);\n  label.category = temp_key;\n  value.data = temp_value;\n  dataSource = {\n    chart: {\n      caption: \"Countries With Most Oil Reserves [2017-18]\",\n      subcaption: \"In MMbbl = One Million barrels\",\n      xaxisname: \"Country\",\n      yaxisname: \"Reserves (MMbbl)\",\n      numbersuffix: \"K\",\n      theme: \"candy\"\n    },\n    data: [{\n      label: \"Venezuela\",\n      value: \"290\"\n    }, {\n      label: \"Saudi\",\n      value: \"260\"\n    }, {\n      label: \"Canada\",\n      value: \"180\"\n    }, {\n      label: \"Iran\",\n      value: \"140\"\n    }, {\n      label: \"Russia\",\n      value: \"115\"\n    }, {\n      label: \"UAE\",\n      value: \"100\"\n    }, {\n      label: \"US\",\n      value: \"30\"\n    }, {\n      label: \"China\",\n      value: \"30\"\n    }]\n  };\n  return datasource;\n}\n\nmodule.exports = {\n  sleep: sleep,\n  renderZoomChart: renderZoomChart\n};","map":{"version":3,"sources":["/project/src/variables/charts_cmpBlock.js"],"names":["result","sleep","delay","start","Date","getTime","renderZoomChart","url","tag","title","caption","graph_data","XMLHttpRequest","open","onreadystatechange","readyState","status","process","alert","send","data","responseText","dataParse","JSON","parse","dataObject","datasource","label","value","temp_key","temp_value","reverse","index","length","_id","slice","category","dataSource","chart","subcaption","xaxisname","yaxisname","numbersuffix","theme","module","exports"],"mappings":"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","sourcesContent":["// total data 출력시 사용\nlet result; //zoom in zoom out chart data\n\nfunction sleep (delay) {\n  var start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\n//render zoom in zoom out graph\nfunction renderZoomChart(url, tag, title, caption){\n  var graph_data = new XMLHttpRequest(); // graph_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  graph_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  graph_data.onreadystatechange = function(){\n      if(graph_data.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(graph_data.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n              result = process(tag, title, caption, graph_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n              return result;\n          }else{\n                alert(title+\"그래프 데이터 요청 실패:\" + graph_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  graph_data.send(null);\n  return result;\n}\n\nfunction process(tag, title, caption, graph_data){  // 프로세스를 부름\n  var data = graph_data.responseText;          // get은 Text 방식으로\n  var dataParse = JSON.parse(data);     //객체화 : 배열 처리\n  var dataObject = dataParse[0];\n\n  var datasource = {};\n  var label = {};\n  var value = {};\n\n  var temp_key = \"\";\n  var temp_value = \"\";\n\n  label = {\"category\" : \"\"}\n  value = {\"serisename\" : \"test\", \"data\" : \"\" }\n\n  dataParse.reverse()\n  for(var index = 0; index<dataParse.length; index++) {\n    temp_key += dataParse[index]._id + '|';\n    temp_value += dataParse[index][tag] + '|';\n  };\n\n  temp_key = temp_key.slice(0, -1);\n  temp_value = temp_value.slice(0, -1);\n\n  label.category = temp_key;\n  value.data = temp_value;\n\n  dataSource = {\n      chart: {\n        caption: \"Countries With Most Oil Reserves [2017-18]\",\n        subcaption: \"In MMbbl = One Million barrels\",\n        xaxisname: \"Country\",\n        yaxisname: \"Reserves (MMbbl)\",\n        numbersuffix: \"K\",\n        theme: \"candy\"\n      },\n      data: [\n        {\n          label: \"Venezuela\",\n          value: \"290\"\n        },\n        {\n          label: \"Saudi\",\n          value: \"260\"\n        },\n        {\n          label: \"Canada\",\n          value: \"180\"\n        },\n        {\n          label: \"Iran\",\n          value: \"140\"\n        },\n        {\n          label: \"Russia\",\n          value: \"115\"\n        },\n        {\n          label: \"UAE\",\n          value: \"100\"\n        },\n        {\n          label: \"US\",\n          value: \"30\"\n        },\n        {\n          label: \"China\",\n          value: \"30\"\n        }\n      ]\n    };\n\nreturn datasource;\n}\n\nmodule.exports = {\n  sleep,\n  renderZoomChart,\n};\n"]},"metadata":{},"sourceType":"module"}