{"ast":null,"code":"// total data 출력시 사용\nvar result; //zoom in zoom out chart data\n\nfunction sleep(delay) {\n  var start = new Date().getTime();\n\n  while (new Date().getTime() < start + delay) {\n    ;\n  }\n} //render zoom in zoom out graph\n\n\nfunction renderZoomChart(url, tag, title, caption) {\n  var graph_data = new XMLHttpRequest(); // graph_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n\n  graph_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n\n  graph_data.onreadystatechange = function () {\n    if (graph_data.readyState === 4) {\n      // 통신 상태가 4 = 양호 확인\n      if (graph_data.status === 200) {\n        //status 가 200일 경우 아래 process; 로 진행\n        result = process(tag, title, caption, graph_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n\n        return result;\n      } else {\n        alert(title + \"그래프 데이터 요청 실패:\" + graph_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n      }\n    }\n  };\n\n  graph_data.send(null);\n  return result;\n}\n\nfunction process(tag, title, caption, graph_data) {\n  // 프로세스를 부름\n  var data = graph_data.responseText; // get은 Text 방식으로\n\n  var dataParse = JSON.parse(data); //객체화 : 배열 처리\n\n  var datasource = {};\n  var data_category = [];\n  var data_value = [];\n\n  for (var index = 0; index < dataParse.length; index++) {\n    data_category.push({\n      'label': dataParse[index]._id\n    });\n    data_value.push({\n      'value': dataParse[index][tag]\n    });\n  }\n\n  console.log(data_category);\n  datasource = {\n    chart: {\n      caption: title,\n      subcaption: caption,\n      xaxisname: \"Block Height\",\n      yaxisname: \"Propagation Time(sec)\",\n      \"rotatelabels\": \"1\",\n      \"drawAnchors\": \"0\",\n      \"showLabels\": \"0\",\n      \"palettecolors\": \"#17afb7\",\n      // 선 색상 변경 가능\n      \"setadaptiveymin\": \"1\",\n      \"linethickness\": \"3\",\n      \"forceaxislimits\": \"1\",\n      \"pixelsperpoint\": \"0\",\n      \"pixelsperlabel\": \"30\",\n      \"compactdatamode\": \"1\",\n      \"theme\": \"fusion\",\n      aligncaptionwithcanvas: \"0\",\n      \"numberscalevalue\": \"1000,1000,1000,1000,1000\",\n      \"numberscaleunit\": \"K,M,G,T,P\",\n      \"showBorder\": \"0\",\n      \"showShadow\": \"0\",\n      //use3DLighting: \"0\",\n      \"bgColor\": \"#25263b\",\n      //bgAlpha: \"0\",\n      \"canvasBgAlpha\": \"0\",\n      \"plotBorderAlpha\": \"0\",\n      \"toolTipBgcolor\": \"#484E69\",\n      \"tooltipBorderThickness\": \"0.7\",\n      \"toolTipColor\": \"#FDFDFD\",\n      \"baseFont\": \"\",\n      \"baseFontSize\": \"10\",\n      \"baseFontColor\": \"ededf0\",\n      \"showLegend\": \"1\",\n      \"legendShadow\": \"0\",\n      \"legendBorderAlpha\": \"0\",\n      \"drawCustomLegendIcon\": \"1\",\n      \"legendBgAlpha\": \"0\",\n      \"showAlternateHGridColor\": \"0\",\n      \"legendNumColumns\": \"1\",\n      \"legendPosition\": \"RIGHT\",\n      \"defaultCenterLabel\": \"Total <br> $214\",\n      \"centerLabel\": \"$label<br>$value\",\n      \"centerLabelBold\": \"2\",\n      \"centerLabelFontSize\": \"20\",\n      \"enableRotation\": \"0\",\n      \"transposeAnimation\": \"1\",\n      \"plotToolText\": \"<b>$dataValue</b> leads received\"\n    },\n    categories: [{\n      category: [{\n        label: \"2012\"\n      }, {\n        label: \"2013\"\n      }, {\n        label: \"2014\"\n      }, {\n        label: \"2015\"\n      }, {\n        label: \"2016\"\n      }]\n    }],\n    dataset: [{\n      seriesname: \"iOS App Store\",\n      data: [{\n        value: \"125000\"\n      }, {\n        value: \"300000\"\n      }, {\n        value: \"480000\"\n      }, {\n        value: \"800000\"\n      }, {\n        value: \"1100000\"\n      }]\n    }]\n  };\n  return datasource;\n}\n\nmodule.exports = {\n  sleep: sleep,\n  renderZoomChart: renderZoomChart\n};","map":{"version":3,"sources":["/project/src/variables/charts_cmpBlock.js"],"names":["result","sleep","delay","start","Date","getTime","renderZoomChart","url","tag","title","caption","graph_data","XMLHttpRequest","open","onreadystatechange","readyState","status","process","alert","send","data","responseText","dataParse","JSON","parse","datasource","data_category","data_value","index","length","push","_id","console","log","chart","subcaption","xaxisname","yaxisname","aligncaptionwithcanvas","categories","category","label","dataset","seriesname","value","module","exports"],"mappings":"AAAA;AACA,IAAIA,MAAJ,C,CAAY;;AAEZ,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,SAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAK,GAAGD,KAAtC;AAA4C;AAA5C;AACD,C,CAED;;;AACA,SAASI,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0CC,OAA1C,EAAkD;AAChD,MAAIC,UAAU,GAAG,IAAIC,cAAJ,EAAjB,CADgD,CACT;;AACvCD,EAAAA,UAAU,CAACE,IAAX,CAAgB,KAAhB,EAAuBN,GAAvB,EAA4B,KAA5B,EAFgD,CAEZ;;AACpCI,EAAAA,UAAU,CAACG,kBAAX,GAAgC,YAAU;AACtC,QAAGH,UAAU,CAACI,UAAX,KAA0B,CAA7B,EAA+B;AAAE;AAC7B,UAAGJ,UAAU,CAACK,MAAX,KAAsB,GAAzB,EAA6B;AAAE;AAC3BhB,QAAAA,MAAM,GAAGiB,OAAO,CAACT,GAAD,EAAMC,KAAN,EAAaC,OAAb,EAAsBC,UAAtB,CAAhB,CADyB,CAC0B;;AACnD,eAAOX,MAAP;AACH,OAHD,MAGK;AACCkB,QAAAA,KAAK,CAACT,KAAK,GAAC,gBAAN,GAAyBE,UAAU,CAACK,MAArC,CAAL,CADD,CACoD;AACxD;AACJ;AACJ,GATD;;AAUAL,EAAAA,UAAU,CAACQ,IAAX,CAAgB,IAAhB;AACA,SAAOnB,MAAP;AACD;;AAED,SAASiB,OAAT,CAAiBT,GAAjB,EAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCC,UAAtC,EAAiD;AAAG;AAClD,MAAIS,IAAI,GAAGT,UAAU,CAACU,YAAtB,CAD+C,CACF;;AAC7C,MAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB,CAF+C,CAET;;AAEtC,MAAIK,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,SAAS,CAACO,MAAtC,EAA8CD,KAAK,EAAnD,EAAsD;AACpDF,IAAAA,aAAa,CAACI,IAAd,CAAmB;AAAC,eAASR,SAAS,CAACM,KAAD,CAAT,CAAiBG;AAA3B,KAAnB;AACAJ,IAAAA,UAAU,CAACG,IAAX,CAAgB;AAAC,eAASR,SAAS,CAACM,KAAD,CAAT,CAAiBpB,GAAjB;AAAV,KAAhB;AACD;;AACDwB,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AACAD,EAAAA,UAAU,GAAG;AACXS,IAAAA,KAAK,EAAE;AACLxB,MAAAA,OAAO,EAAED,KADJ;AAEL0B,MAAAA,UAAU,EAAEzB,OAFP;AAGL0B,MAAAA,SAAS,EAAE,cAHN;AAILC,MAAAA,SAAS,EAAE,uBAJN;AAKL,sBAAgB,GALX;AAML,qBAAe,GANV;AAOL,oBAAc,GAPT;AAQL,uBAAiB,SARZ;AAQ6B;AAClC,yBAAmB,GATd;AAUL,uBAAiB,GAVZ;AAWL,yBAAmB,GAXd;AAYL,wBAAkB,GAZb;AAaL,wBAAkB,IAbb;AAcL,yBAAmB,GAdd;AAeL,eAAS,QAfJ;AAgBLC,MAAAA,sBAAsB,EAAE,GAhBnB;AAkBL,0BAAoB,0BAlBf;AAmBL,yBAAmB,WAnBd;AAqBL,oBAAc,GArBT;AAsBL,oBAAc,GAtBT;AAuBL;AACA,iBAAW,SAxBN;AAyBL;AACA,uBAAiB,GA1BZ;AA2BL,yBAAmB,GA3Bd;AA6BL,wBAAkB,SA7Bb;AA8BL,gCAA0B,KA9BrB;AA+BL,sBAAgB,SA/BX;AAgCL,kBAAY,EAhCP;AAiCL,sBAAgB,IAjCX;AAkCL,uBAAiB,QAlCZ;AAoCL,oBAAc,GApCT;AAqCL,sBAAgB,GArCX;AAsCL,2BAAqB,GAtChB;AAuCL,8BAAwB,GAvCnB;AAwCL,uBAAiB,GAxCZ;AA0CL,iCAA2B,GA1CtB;AA4CL,0BAAoB,GA5Cf;AA6CL,wBAAkB,OA7Cb;AA8CL,4BAAsB,iBA9CjB;AA+CL,qBAAe,kBA/CV;AAgDL,yBAAmB,GAhDd;AAiDL,6BAAuB,IAjDlB;AAkDL,wBAAkB,GAlDb;AAmDL,4BAAsB,GAnDjB;AAoDL,sBAAgB;AApDX,KADI;AAuDbC,IAAAA,UAAU,EAAE,CACV;AACEC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE;AADT,OADQ,EAIR;AACEA,QAAAA,KAAK,EAAE;AADT,OAJQ,EAOR;AACEA,QAAAA,KAAK,EAAE;AADT,OAPQ,EAUR;AACEA,QAAAA,KAAK,EAAE;AADT,OAVQ,EAaR;AACEA,QAAAA,KAAK,EAAE;AADT,OAbQ;AADZ,KADU,CAvDC;AA4EbC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,UAAU,EAAE,eADd;AAEEvB,MAAAA,IAAI,EAAE,CACJ;AACEwB,QAAAA,KAAK,EAAE;AADT,OADI,EAIJ;AACEA,QAAAA,KAAK,EAAE;AADT,OAJI,EAOJ;AACEA,QAAAA,KAAK,EAAE;AADT,OAPI,EAUJ;AACEA,QAAAA,KAAK,EAAE;AADT,OAVI,EAaJ;AACEA,QAAAA,KAAK,EAAE;AADT,OAbI;AAFR,KADO;AA5EI,GAAb;AAoGF,SAAOnB,UAAP;AACC;;AAEDoB,MAAM,CAACC,OAAP,GAAiB;AACf7C,EAAAA,KAAK,EAALA,KADe;AAEfK,EAAAA,eAAe,EAAfA;AAFe,CAAjB","sourcesContent":["// total data 출력시 사용\nlet result; //zoom in zoom out chart data\n\nfunction sleep (delay) {\n  var start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\n//render zoom in zoom out graph\nfunction renderZoomChart(url, tag, title, caption){\n  var graph_data = new XMLHttpRequest(); // graph_data은 XMLHttpRequest 객체(http를 통해 데이터를 받음)\n  graph_data.open(\"get\", url, false); // tx합 json 데이터를 을 비동기 방식  / get 방식으로 읽어들임\n  graph_data.onreadystatechange = function(){\n      if(graph_data.readyState === 4){ // 통신 상태가 4 = 양호 확인\n          if(graph_data.status === 200){ //status 가 200일 경우 아래 process; 로 진행\n              result = process(tag, title, caption, graph_data); // 프로세스를 부르겠다는 의미 >> 아래 function process로 진행\n              return result;\n          }else{\n                alert(title+\"그래프 데이터 요청 실패:\" + graph_data.status); // if의 내용이 실패시 요청 실패 : 오류 메시지 출력\n          }\n      }\n  }\n  graph_data.send(null);\n  return result;\n}\n\nfunction process(tag, title, caption, graph_data){  // 프로세스를 부름\n  var data = graph_data.responseText;          // get은 Text 방식으로\n  var dataParse = JSON.parse(data);     //객체화 : 배열 처리\n\n  var datasource = {};\n  var data_category = [];\n  var data_value = [];\n\n  for (var index = 0; index < dataParse.length; index++){\n    data_category.push({'label': dataParse[index]._id})\n    data_value.push({'value': dataParse[index][tag]})\n  }\n  console.log(data_category)\n  datasource = {\n    chart: {\n      caption: title,\n      subcaption: caption,\n      xaxisname: \"Block Height\",\n      yaxisname: \"Propagation Time(sec)\",\n      \"rotatelabels\": \"1\",\n      \"drawAnchors\": \"0\",\n      \"showLabels\": \"0\",\n      \"palettecolors\": \"#17afb7\",       // 선 색상 변경 가능\n      \"setadaptiveymin\": \"1\",\n      \"linethickness\": \"3\",\n      \"forceaxislimits\": \"1\",\n      \"pixelsperpoint\": \"0\",\n      \"pixelsperlabel\": \"30\",\n      \"compactdatamode\": \"1\",\n      \"theme\": \"fusion\",\n      aligncaptionwithcanvas: \"0\",\n\n      \"numberscalevalue\": \"1000,1000,1000,1000,1000\",\n      \"numberscaleunit\": \"K,M,G,T,P\",\n\n      \"showBorder\": \"0\",\n      \"showShadow\": \"0\",\n      //use3DLighting: \"0\",\n      \"bgColor\": \"#25263b\",\n      //bgAlpha: \"0\",\n      \"canvasBgAlpha\": \"0\",\n      \"plotBorderAlpha\": \"0\",\n\n      \"toolTipBgcolor\": \"#484E69\",\n      \"tooltipBorderThickness\": \"0.7\",\n      \"toolTipColor\": \"#FDFDFD\",\n      \"baseFont\": \"\",\n      \"baseFontSize\": \"10\",\n      \"baseFontColor\": \"ededf0\",\n\n      \"showLegend\": \"1\",\n      \"legendShadow\": \"0\",\n      \"legendBorderAlpha\": \"0\",\n      \"drawCustomLegendIcon\": \"1\",\n      \"legendBgAlpha\": \"0\",\n\n      \"showAlternateHGridColor\": \"0\",\n\n      \"legendNumColumns\": \"1\",\n      \"legendPosition\": \"RIGHT\",\n      \"defaultCenterLabel\": \"Total <br> $214\",\n      \"centerLabel\": \"$label<br>$value\",\n      \"centerLabelBold\": \"2\",\n      \"centerLabelFontSize\": \"20\",\n      \"enableRotation\": \"0\",\n      \"transposeAnimation\": \"1\",\n      \"plotToolText\": \"<b>$dataValue</b> leads received\"\n    },\n  categories: [\n    {\n      category: [\n        {\n          label: \"2012\"\n        },\n        {\n          label: \"2013\"\n        },\n        {\n          label: \"2014\"\n        },\n        {\n          label: \"2015\"\n        },\n        {\n          label: \"2016\"\n        }\n      ]\n    }\n  ],\n  dataset: [\n    {\n      seriesname: \"iOS App Store\",\n      data: [\n        {\n          value: \"125000\"\n        },\n        {\n          value: \"300000\"\n        },\n        {\n          value: \"480000\"\n        },\n        {\n          value: \"800000\"\n        },\n        {\n          value: \"1100000\"\n        }\n      ]\n    },\n  ]\n  };\n\nreturn datasource;\n}\n\nmodule.exports = {\n  sleep,\n  renderZoomChart,\n};\n"]},"metadata":{},"sourceType":"module"}